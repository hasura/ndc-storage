// Code generated by github.com/hasura/ndc-sdk-go/cmd/hasura-ndc-go, DO NOT EDIT.
package connector

import (
	"github.com/hasura/ndc-sdk-go/schema"
)

func toPtr[V any](value V) *V {
	return &value
}

// GetConnectorSchema gets the generated connector schema
func GetConnectorSchema() *schema.SchemaResponse {
	return &schema.SchemaResponse{
		Collections: []schema.CollectionInfo{},
		ObjectTypes: schema.SchemaResponseObjectTypes{
			"AbortIncompleteMultipartUpload": schema.ObjectType{
				Description: toPtr("structure, not supported yet on MinIO"),
				Fields: schema.ObjectTypeFields{
					"daysAfterInitiation": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"BucketLifecycleConfiguration": schema.ObjectType{
				Description: toPtr("is a collection of lifecycle Rule objects."),
				Fields: schema.ObjectTypeFields{
					"rules": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("BucketLifecycleRule")).Encode(),
					},
				},
			},
			"BucketLifecycleRule": schema.ObjectType{
				Description: toPtr("represents a single rule in lifecycle configuration"),
				Fields: schema.ObjectTypeFields{
					"abortIncompleteMultipartUpload": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("AbortIncompleteMultipartUpload")).Encode(),
					},
					"allVersionsExpiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("LifecycleAllVersionsExpiration")).Encode(),
					},
					"delMarkerExpiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("LifecycleDelMarkerExpiration")).Encode(),
					},
					"expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("LifecycleExpiration")).Encode(),
					},
					"filter": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("LifecycleFilter")).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"noncurrentVersionExpiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("LifecycleNoncurrentVersionExpiration")).Encode(),
					},
					"noncurrentVersionTransition": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("LifecycleNoncurrentVersionTransition")).Encode(),
					},
					"prefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"status": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"transition": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("LifecycleTransition")).Encode(),
					},
				},
			},
			"DeleteMarkerReplication": schema.ObjectType{
				Description: toPtr("whether delete markers are replicated - https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html"),
				Fields: schema.ObjectTypeFields{
					"status": schema.ObjectField{
						Type: schema.NewNamedType("StorageReplicationRuleStatus").Encode(),
					},
				},
			},
			"DeleteReplication": schema.ObjectType{
				Description: toPtr("whether versioned deletes are replicated. This is a MinIO specific extension"),
				Fields: schema.ObjectTypeFields{
					"status": schema.ObjectField{
						Type: schema.NewNamedType("StorageReplicationRuleStatus").Encode(),
					},
				},
			},
			"ExistingObjectReplication": schema.ObjectType{
				Description: toPtr("whether existing object replication is enabled"),
				Fields: schema.ObjectTypeFields{
					"status": schema.ObjectField{
						Type: schema.NewNamedType("StorageReplicationRuleStatus").Encode(),
					},
				},
			},
			"GetStorageObjectOptions": schema.ObjectType{
				Description: toPtr("are used to specify additional headers or options during GET requests."),
				Fields: schema.ObjectTypeFields{
					"headers": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"partNumber": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"requestParams": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"LifecycleAllVersionsExpiration": schema.ObjectType{
				Description: toPtr("represents AllVersionsExpiration actions element in an ILM policy"),
				Fields: schema.ObjectTypeFields{
					"days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"deleteMarker": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
				},
			},
			"LifecycleDelMarkerExpiration": schema.ObjectType{
				Description: toPtr("represents DelMarkerExpiration actions element in an ILM policy"),
				Fields: schema.ObjectTypeFields{
					"days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"LifecycleExpiration": schema.ObjectType{
				Description: toPtr("expiration details of lifecycle configuration"),
				Fields: schema.ObjectTypeFields{
					"date": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Date")).Encode(),
					},
					"days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"expiredObjectAllVersions": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"expiredObjectDeleteMarker": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
				},
			},
			"LifecycleFilter": schema.ObjectType{
				Description: toPtr("will be used in selecting rule(s) for lifecycle configuration"),
				Fields: schema.ObjectTypeFields{
					"and": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("LifecycleFilterAnd")).Encode(),
					},
					"objectSizeGreaterThan": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"objectSizeLessThan": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"prefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageTag")).Encode(),
					},
				},
			},
			"LifecycleFilterAnd": schema.ObjectType{
				Description: toPtr("the And Rule for LifecycleTag, to be used in LifecycleRuleFilter"),
				Fields: schema.ObjectTypeFields{
					"objectSizeGreaterThan": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"objectSizeLessThan": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"prefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageTag"))).Encode(),
					},
				},
			},
			"LifecycleNoncurrentVersionExpiration": schema.ObjectType{
				Description: toPtr("- Specifies when noncurrent object versions expire. Upon expiration, server permanently deletes the noncurrent object versions. Set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request server delete noncurrent object versions at a specific period in the object's lifetime."),
				Fields: schema.ObjectTypeFields{
					"newerNoncurrentVersions": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"noncurrentDays": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"LifecycleNoncurrentVersionTransition": schema.ObjectType{
				Description: toPtr("sets this action to request server to transition noncurrent object versions to different set storage classes at a specific period in the object's lifetime."),
				Fields: schema.ObjectTypeFields{
					"newerNoncurrentVersions": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"noncurrentDays": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"storageClass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"LifecycleTransition": schema.ObjectType{
				Description: toPtr("transition details of lifecycle configuration"),
				Fields: schema.ObjectTypeFields{
					"date": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Date")).Encode(),
					},
					"days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"storageClass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"ListIncompleteUploadsOptions": schema.ObjectType{
				Description: toPtr("the input arguments of the ListIncompleteUploads method."),
				Fields: schema.ObjectTypeFields{
					"prefix": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"recursive": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
				},
			},
			"ListStorageObjectsOptions": schema.ObjectType{
				Description: toPtr("holds all options of a list object request."),
				Fields: schema.ObjectTypeFields{
					"maxResults": schema.ObjectField{
						Type: schema.NewNamedType("Int32").Encode(),
					},
					"prefix": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"recursive": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
					"startAfter": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"MakeStorageBucketOptions": schema.ObjectType{
				Description: toPtr("holds all options to tweak bucket creation."),
				Fields: schema.ObjectTypeFields{
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"objectLocking": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"region": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
				},
			},
			"NotificationCommonConfig": schema.ObjectType{
				Description: toPtr("- represents one single notification configuration such as topic, queue or lambda configuration."),
				Fields: schema.ObjectTypeFields{
					"arn": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"event": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"filter": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("NotificationFilter")).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"NotificationConfig": schema.ObjectType{
				Description: toPtr("the struct that represents a notification configration object."),
				Fields: schema.ObjectTypeFields{
					"cloudFunctionConfigurations": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("NotificationLambdaConfig")).Encode(),
					},
					"queueConfigurations": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("NotificationQueueConfig")).Encode(),
					},
					"topicConfigurations": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("NotificationTopicConfig")).Encode(),
					},
				},
			},
			"NotificationFilter": schema.ObjectType{
				Description: toPtr("- a tag in the notification xml structure which carries suffix/prefix filters"),
				Fields: schema.ObjectTypeFields{
					"s3Key": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("NotificationS3Key")).Encode(),
					},
				},
			},
			"NotificationFilterRule": schema.ObjectType{
				Description: toPtr("child of S3Key, a tag in the notification xml which carries suffix/prefix filters"),
				Fields: schema.ObjectTypeFields{
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"value": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"NotificationLambdaConfig": schema.ObjectType{
				Description: toPtr("carries one single cloudfunction notification configuration"),
				Fields: schema.ObjectTypeFields{
					"arn": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"cloudFunction": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"event": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"filter": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("NotificationFilter")).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"NotificationQueueConfig": schema.ObjectType{
				Description: toPtr("carries one single queue notification configuration"),
				Fields: schema.ObjectTypeFields{
					"arn": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"event": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"filter": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("NotificationFilter")).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"queue": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"NotificationS3Key": schema.ObjectType{
				Description: toPtr("child of Filter, a tag in the notification xml which carries suffix/prefix filters"),
				Fields: schema.ObjectTypeFields{
					"filterRule": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("NotificationFilterRule"))).Encode(),
					},
				},
			},
			"NotificationTopicConfig": schema.ObjectType{
				Description: toPtr("carries one single topic notification configuration"),
				Fields: schema.ObjectTypeFields{
					"arn": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"event": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"filter": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("NotificationFilter")).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"topic": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"PresignedGetStorageObjectOptions": schema.ObjectType{
				Description: toPtr("represent the options for the PresignedGetObject method."),
				Fields: schema.ObjectTypeFields{
					"expiry": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Duration")).Encode(),
					},
					"requestParams": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
				},
			},
			"PresignedURLResponse": schema.ObjectType{
				Description: toPtr("holds the presigned URL and expiry information."),
				Fields: schema.ObjectTypeFields{
					"expiredAt": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"url": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"PutStorageObjectArguments": schema.ObjectType{
				Description: toPtr("represents input arguments of the PutObject method."),
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"object": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"options": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("PutStorageObjectOptions")).Encode(),
					},
					"where": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			"PutStorageObjectOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for PutObject call."),
				Fields: schema.ObjectTypeFields{
					"autoChecksum": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ChecksumType")).Encode(),
					},
					"cacheControl": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ChecksumType")).Encode(),
					},
					"concurrentStreamParts": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"contentDisposition": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"contentEncoding": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"contentLanguage": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"contentType": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"disableContentSha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"disableMultipart": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"expires": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"legalHold": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"numThreads": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"partSize": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"retainUntilDate": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"sendContentMd5": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"storageClass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"userMetadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"userTags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"websiteRedirectLocation": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"RemoveStorageObjectError": schema.ObjectType{
				Description: toPtr("the container of Multi Delete S3 API error."),
				Fields: schema.ObjectTypeFields{
					"error": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"objectName": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"RemoveStorageObjectOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for RemoveObject call."),
				Fields: schema.ObjectTypeFields{
					"forceDelete": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"governanceBypass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"RemoveStorageObjectsOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for RemoveObjects call."),
				Fields: schema.ObjectTypeFields{
					"governanceBypass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"maxResults": schema.ObjectField{
						Type: schema.NewNamedType("Int32").Encode(),
					},
					"prefix": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"recursive": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
					"startAfter": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"ReplicaModifications": schema.ObjectType{
				Description: toPtr("specifies if replica modification sync is enabled"),
				Fields: schema.ObjectTypeFields{
					"status": schema.ObjectField{
						Type: schema.NewNamedType("StorageReplicationRuleStatus").Encode(),
					},
				},
			},
			"ServerSideEncryptionConfiguration": schema.ObjectType{
				Description: toPtr("is the default encryption configuration structure."),
				Fields: schema.ObjectTypeFields{
					"rules": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("ServerSideEncryptionRule")).Encode(),
					},
				},
			},
			"ServerSideEncryptionRule": schema.ObjectType{
				Description: toPtr("rule layer encapsulates default encryption configuration"),
				Fields: schema.ObjectTypeFields{
					"apply": schema.ObjectField{
						Type: schema.NewNamedType("StorageApplySSEByDefault").Encode(),
					},
				},
			},
			"SetStorageObjectLegalHoldOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for PutObjectLegalHold call."),
				Fields: schema.ObjectTypeFields{
					"status": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"SetStorageObjectLockConfig": schema.ObjectType{
				Description: toPtr("represents the object lock configuration options in given bucket"),
				Fields: schema.ObjectTypeFields{
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"unit": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionValidityUnit")).Encode(),
					},
					"validity": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"SetStorageObjectRetentionOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for PutObject call."),
				Fields: schema.ObjectTypeFields{
					"governanceBypass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"retainUntilDate": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"SetStorageObjectTagsOptions": schema.ObjectType{
				Description: toPtr("holds an object version id to update tag(s) of a specific object version."),
				Fields: schema.ObjectTypeFields{
					"tags": schema.ObjectField{
						Type: schema.NewNamedType("JSON").Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"SourceSelectionCriteria": schema.ObjectType{
				Description: toPtr("specifies additional source selection criteria in ReplicationConfiguration."),
				Fields: schema.ObjectTypeFields{
					"replicaModifications": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ReplicaModifications")).Encode(),
					},
				},
			},
			"StorageApplySSEByDefault": schema.ObjectType{
				Description: toPtr("defines default encryption configuration, KMS or SSE. To activate KMS, SSEAlgoritm needs to be set to `aws:kms“. Minio currently does not support Kms."),
				Fields: schema.ObjectTypeFields{
					"kmsMasterKeyId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"sseAlgorithm": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"StorageBucketArguments": schema.ObjectType{
				Description: toPtr("represent the common input arguments for bucket-related methods."),
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			"StorageBucketInfo": schema.ObjectType{
				Description: toPtr("container for bucket metadata."),
				Fields: schema.ObjectTypeFields{
					"creationDate": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
				},
			},
			"StorageBucketVersioningConfiguration": schema.ObjectType{
				Description: toPtr("is the versioning configuration structure"),
				Fields: schema.ObjectTypeFields{
					"excludeFolders": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"excludedPrefixes": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("String"))).Encode(),
					},
					"mfaDelete": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"status": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageCopyDestOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for CopyObject/ComposeObject APIs."),
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"legalHold": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"object": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"replaceMetadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"replaceTags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"retainUntilDate": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"userMetadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"userTags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
				},
			},
			"StorageCopySrcOptions": schema.ObjectType{
				Description: toPtr("represents a source object to be copied, using server-side copying APIs."),
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"end": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"matchETag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"matchModifiedSince": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"matchRange": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"matchUnmodifiedSince": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"noMatchETag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"object": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"start": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageGrant": schema.ObjectType{
				Description: toPtr("holds grant information."),
				Fields: schema.ObjectTypeFields{
					"grantee": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageGrantee")).Encode(),
					},
					"permission": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageGrantee": schema.ObjectType{
				Description: toPtr("represents the person being granted permissions."),
				Fields: schema.ObjectTypeFields{
					"displayName": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"uri": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageObject": schema.ObjectType{
				Description: toPtr("container for object metadata."),
				Fields: schema.ObjectTypeFields{
					"accessTierChangeTime": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"accessTierInferred": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"acl": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"archiveStatus": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"blobSequenceNumber": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"blobType": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"cacheControl": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumCrc32": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumCrc32C": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumCrc64Nvme": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumSha1": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumSha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"contentDisposition": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"contentEncoding": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"contentLanguage": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"contentMd5": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"contentType": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"copyCompletionTime": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"copyId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"copyProgress": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"copySource": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"copyStatus": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"copyStatusDescription": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"creationTime": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"customerProvidedKeySha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"deleted": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"deletedTime": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"destinationSnapshot": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"encryptionScope": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"etag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"expirationRuleId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"expires": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"grant": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageGrant"))).Encode(),
					},
					"group": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"immutabilityPolicyMode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"immutabilityPolicyUntilDate": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"incrementalCopy": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"isLatest": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"lastAccessTime": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"lastModified": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
					"leaseDuration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"leaseState": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"leaseStatus": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"legalHold": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"metadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"owner": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageOwner")).Encode(),
					},
					"permissions": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"rehydratePriority": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"remainingRetentionDays": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"replicationReady": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"replicationStatus": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageObjectReplicationStatus")).Encode(),
					},
					"resourceType": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"restore": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRestoreInfo")).Encode(),
					},
					"sealed": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"serverEncrypted": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"storageClass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"userMetadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"userTagCount": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"userTags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageObjectChecksum": schema.ObjectType{
				Description: toPtr("represents checksum values of the object."),
				Fields: schema.ObjectTypeFields{
					"checksumCrc32": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumCrc32C": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumCrc64Nvme": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumSha1": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumSha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageObjectListResults": schema.ObjectType{
				Description: toPtr("hold the paginated results of the storage object list."),
				Fields: schema.ObjectTypeFields{
					"objects": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("StorageObject")).Encode(),
					},
					"pageInfo": schema.ObjectField{
						Type: schema.NewNamedType("StorageObjectPaginationInfo").Encode(),
					},
				},
			},
			"StorageObjectLockConfig": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"objectLock": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"unit": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionValidityUnit")).Encode(),
					},
					"validity": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"StorageObjectMultipartInfo": schema.ObjectType{
				Description: toPtr("container for multipart object metadata."),
				Fields: schema.ObjectTypeFields{
					"initiated": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"storageClass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"uploadId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageObjectPaginationInfo": schema.ObjectType{
				Description: toPtr("holds the pagination information."),
				Fields: schema.ObjectTypeFields{
					"cursor": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"hasNextPage": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
					"nextCursor": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageOwner": schema.ObjectType{
				Description: toPtr("name."),
				Fields: schema.ObjectTypeFields{
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageReplicationConfig": schema.ObjectType{
				Description: toPtr("replication configuration specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html"),
				Fields: schema.ObjectTypeFields{
					"role": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"rules": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("StorageReplicationRule")).Encode(),
					},
				},
			},
			"StorageReplicationDestination": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"storageClass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageReplicationFilter": schema.ObjectType{
				Description: toPtr("a filter for a replication configuration Rule."),
				Fields: schema.ObjectTypeFields{
					"and": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageReplicationFilterAnd")).Encode(),
					},
					"rrefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageTag")).Encode(),
					},
				},
			},
			"StorageReplicationFilterAnd": schema.ObjectType{
				Description: toPtr("- a tag to combine a prefix and multiple tags for replication configuration rule."),
				Fields: schema.ObjectTypeFields{
					"rrefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageTag"))).Encode(),
					},
				},
			},
			"StorageReplicationRule": schema.ObjectType{
				Description: toPtr("a rule for replication configuration."),
				Fields: schema.ObjectTypeFields{
					"deleteMarkerReplication": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("DeleteMarkerReplication")).Encode(),
					},
					"deleteReplication": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("DeleteReplication")).Encode(),
					},
					"destination": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageReplicationDestination")).Encode(),
					},
					"existingObjectReplication": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ExistingObjectReplication")).Encode(),
					},
					"filter": schema.ObjectField{
						Type: schema.NewNamedType("StorageReplicationFilter").Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"priority": schema.ObjectField{
						Type: schema.NewNamedType("Int32").Encode(),
					},
					"sourceSelectionCriteria": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("SourceSelectionCriteria")).Encode(),
					},
					"status": schema.ObjectField{
						Type: schema.NewNamedType("StorageReplicationRuleStatus").Encode(),
					},
				},
			},
			"StorageRestoreInfo": schema.ObjectType{
				Description: toPtr("contains information of the restore operation of an archived object."),
				Fields: schema.ObjectTypeFields{
					"expiryTime": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"ongoingRestore": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
				},
			},
			"StorageTag": schema.ObjectType{
				Description: toPtr("structure key/value pair representing an object tag to apply configuration"),
				Fields: schema.ObjectTypeFields{
					"key": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"value": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageUploadInfo": schema.ObjectType{
				Description: toPtr("represents the information of the uploaded object."),
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"checksumCrc32": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumCrc32C": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumCrc64Nvme": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumSha1": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksumSha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"contentMd5": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"etag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"expirationRuleId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"lastModified": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"location": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"versionId": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
		},
		Functions: []schema.FunctionInfo{
			{
				Name:        "downloadStorageObject",
				Description: toPtr("returns a stream of the object data. Most of the common errors occur when reading the stream."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("Bytes")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"headers": {
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"partNumber": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"requestParams": {
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"versionId": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "downloadStorageObjectText",
				Description: toPtr("returns the object content in plain text. Use this function only if you know exactly the file as an text file."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("String")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"headers": {
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"partNumber": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"requestParams": {
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"versionId": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "storageBucketEncryption",
				Description: toPtr("gets default encryption configuration set on a bucket."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("ServerSideEncryptionConfiguration")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "storageBucketExists",
				Description: toPtr("checks if a bucket exists."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "storageBucketLifecycle",
				Description: toPtr("gets lifecycle on a bucket or a prefix."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("BucketLifecycleConfiguration")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "storageBucketNotification",
				Description: toPtr("gets notification configuration on a bucket."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("NotificationConfig")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "storageBucketPolicy",
				Description: toPtr("gets access permissions on a bucket or a prefix."),
				ResultType:  schema.NewNamedType("String").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:       "storageBucketReplication",
				ResultType: schema.NewNullableType(schema.NewNamedType("StorageReplicationConfig")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "storageBucketVersioning",
				Description: toPtr("gets versioning configuration set on a bucket."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("StorageBucketVersioningConfiguration")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "storageBuckets",
				Description: toPtr("list all buckets."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("StorageBucketInfo")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "storageIncompleteUploads",
				Description: toPtr("list partially uploaded objects in a bucket."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("StorageObjectMultipartInfo")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"prefix": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"recursive": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
				},
			},
			{
				Name:        "storageObject",
				Description: toPtr("fetches metadata of an object."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("StorageObject")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"headers": {
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"partNumber": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"requestParams": {
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"versionId": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "storageObjectLockConfig",
				Description: toPtr("gets object lock configuration of given bucket."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("StorageObjectLockConfig")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "storageObjects",
				Description: toPtr("lists objects in a bucket."),
				ResultType:  schema.NewNamedType("StorageObjectListResults").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"maxResults": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"recursive": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"startAfter": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "storagePresignedDownloadUrl",
				Description: toPtr("generates a presigned URL for HTTP GET operations. Browsers/Mobile clients may point to this URL to directly download objects even if the bucket is private. This presigned URL can have an associated expiration time in seconds after which it is no longer operational. The maximum expiry is 604800 seconds (i.e. 7 days) and minimum is 1 second."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("PresignedURLResponse")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"expiry": {
						Type: schema.NewNullableType(schema.NewNamedType("Duration")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"requestParams": {
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "storagePresignedUploadUrl",
				Description: toPtr("generates a presigned URL for HTTP PUT operations. Browsers/Mobile clients may point to this URL to upload objects directly to a bucket even if it is private. This presigned URL can have an associated expiration time in seconds after which it is no longer operational. The default expiry is set to 7 days."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("PresignedURLResponse")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"expiry": {
						Type: schema.NewNullableType(schema.NewNamedType("Duration")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
		},
		Procedures: []schema.ProcedureInfo{
			{
				Name:        "composeStorageObject",
				Description: toPtr("creates an object by concatenating a list of source objects using server-side copying."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"dest": {
						Type: schema.NewNamedType("StorageCopyDestOptions").Encode(),
					},
					"sources": {
						Type: schema.NewArrayType(schema.NewNamedType("StorageCopySrcOptions")).Encode(),
					},
				},
			},
			{
				Name:        "copyStorageObject",
				Description: toPtr("creates or replaces an object through server-side copying of an existing object. It supports conditional copying, copying a part of an object and server-side encryption of destination and decryption of source. To copy multiple source objects into a single destination object see the ComposeObject API."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"dest": {
						Type: schema.NewNamedType("StorageCopyDestOptions").Encode(),
					},
					"source": {
						Type: schema.NewNamedType("StorageCopySrcOptions").Encode(),
					},
				},
			},
			{
				Name:        "createStorageBucket",
				Description: toPtr("creates a new bucket."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"objectLocking": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"region": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": {
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
				},
			},
			{
				Name:        "enableStorageBucketVersioning",
				Description: toPtr("enables bucket versioning support."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "removeIncompleteStorageUpload",
				Description: toPtr("removes a partially uploaded object."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			{
				Name:        "removeStorageBucket",
				Description: toPtr("removes a bucket, bucket should be empty to be successfully removed."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:       "removeStorageBucketReplication",
				ResultType: schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "removeStorageObject",
				Description: toPtr("removes an object with some specified options."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"forceDelete": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"governanceBypass": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"versionId": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "removeStorageObjects",
				Description: toPtr("remove a list of objects obtained from an input channel. The call sends a delete request to the server up to 1000 objects at a time. The errors observed are sent over the error channel."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("RemoveStorageObjectError")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"governanceBypass": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"maxResults": {
						Type: schema.NewNamedType("Int32").Encode(),
					},
					"prefix": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"recursive": {
						Type: schema.NewNamedType("Boolean").Encode(),
					},
					"startAfter": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "setStorageBucketEncryption",
				Description: toPtr("sets default encryption configuration on a bucket."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"rules": {
						Type: schema.NewArrayType(schema.NewNamedType("ServerSideEncryptionRule")).Encode(),
					},
				},
			},
			{
				Name:        "setStorageBucketLifecycle",
				Description: toPtr("sets lifecycle on bucket or an object prefix."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"rules": {
						Type: schema.NewArrayType(schema.NewNamedType("BucketLifecycleRule")).Encode(),
					},
				},
			},
			{
				Name:        "setStorageBucketNotification",
				Description: toPtr("sets a new notification configuration on a bucket."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"cloudFunctionConfigurations": {
						Type: schema.NewArrayType(schema.NewNamedType("NotificationLambdaConfig")).Encode(),
					},
					"queueConfigurations": {
						Type: schema.NewArrayType(schema.NewNamedType("NotificationQueueConfig")).Encode(),
					},
					"topicConfigurations": {
						Type: schema.NewArrayType(schema.NewNamedType("NotificationTopicConfig")).Encode(),
					},
				},
			},
			{
				Name:        "setStorageBucketReplication",
				Description: toPtr("sets replication configuration on a bucket. Role can be obtained by first defining the replication target on MinIO to associate the source and destination buckets for replication with the replication endpoint."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"role": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"rules": {
						Type: schema.NewArrayType(schema.NewNamedType("StorageReplicationRule")).Encode(),
					},
				},
			},
			{
				Name:        "setStorageBucketTags",
				Description: toPtr("sets tags to a bucket."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"tags": {
						Type: schema.NewNamedType("JSON").Encode(),
					},
				},
			},
			{
				Name:        "setStorageObjectLegalHold",
				Description: toPtr("applies legal-hold onto an object."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"status": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"versionId": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:       "setStorageObjectLockConfig",
				ResultType: schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"mode": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"unit": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionValidityUnit")).Encode(),
					},
					"validity": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			{
				Name:        "setStorageObjectRetention",
				Description: toPtr("applies object retention lock onto an object."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"governanceBypass": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"mode": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"retainUntilDate": {
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"versionId": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "setStorageObjectTags",
				Description: toPtr("sets new object Tags to the given object, replaces/overwrites any existing tags."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"tags": {
						Type: schema.NewNamedType("JSON").Encode(),
					},
					"versionId": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "suspendStorageBucketVersioning",
				Description: toPtr("disables bucket versioning support."),
				ResultType:  schema.NewNamedType("Boolean").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
				},
			},
			{
				Name:        "uploadStorageObject",
				Description: toPtr("uploads object that are less than 128MiB in a single PUT operation. For objects that are greater than 128MiB in size, PutObject seamlessly uploads the object as parts of 128MiB or more depending on the actual file size. The max upload size for an object is 5TB."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"data": {
						Type: schema.NewNamedType("Bytes").Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"options": {
						Type: schema.NewNullableType(schema.NewNamedType("PutStorageObjectOptions")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
			{
				Name:        "uploadStorageObjectText",
				Description: toPtr("uploads object in plain text to the storage server. The file content is not encoded to base64 so the input size is smaller than 30%."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"clientId": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"data": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"object": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"options": {
						Type: schema.NewNullableType(schema.NewNamedType("PutStorageObjectOptions")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectSimple")).Encode(),
					},
				},
			},
		},
		ScalarTypes: schema.SchemaResponseScalarTypes{
			"Boolean": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationBoolean().Encode(),
			},
			"Bytes": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationBytes().Encode(),
			},
			"ChecksumType": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"SHA256", "SHA1", "CRC32", "CRC32C", "CRC64NVME", "FullObjectCRC32", "FullObjectCRC32C", "None"}).Encode(),
			},
			"Date": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationDate().Encode(),
			},
			"Duration": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationJSON().Encode(),
			},
			"Int32": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationInt32().Encode(),
			},
			"Int64": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationInt64().Encode(),
			},
			"JSON": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationJSON().Encode(),
			},
			"StorageClientID": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationString().Encode(),
			},
			"StorageObjectReplicationStatus": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"COMPLETED", "PENDING", "FAILED", "REPLICA"}).Encode(),
			},
			"StorageReplicationRuleStatus": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"Enabled", "Disabled"}).Encode(),
			},
			"StorageRetentionMode": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"Locked", "Unlocked"}).Encode(),
			},
			"StorageRetentionValidityUnit": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"DAYS", "YEARS"}).Encode(),
			},
			"String": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationString().Encode(),
			},
			"TimestampTZ": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationTimestampTZ().Encode(),
			},
		},
	}
}
