// Code generated by github.com/hasura/ndc-sdk-go/cmd/hasura-ndc-go, DO NOT EDIT.
package connector

import (
	"github.com/hasura/ndc-sdk-go/schema"
)

func toPtr[V any](value V) *V {
	return &value
}

// GetConnectorSchema gets the generated connector schema
func GetConnectorSchema() *schema.SchemaResponse {
	return &schema.SchemaResponse{
		Collections: []schema.CollectionInfo{},
		ObjectTypes: schema.SchemaResponseObjectTypes{
			"BucketAutoclass": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"enabled": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
					"terminal_storage_class": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"terminal_storage_class_update_time": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
					"toggle_time": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
				},
			},
			"BucketCors": schema.ObjectType{
				Description: toPtr("is the bucket's Cross-Origin Resource Sharing (CORS) configuration."),
				Fields: schema.ObjectTypeFields{
					"max_age": schema.ObjectField{
						Type: schema.NewNamedType("DurationString").Encode(),
					},
					"methods": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"origins": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
					"response_headers": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"BucketHierarchicalNamespace": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"enabled": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
				},
			},
			"BucketLogging": schema.ObjectType{
				Description: toPtr("holds the bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs."),
				Fields: schema.ObjectTypeFields{
					"log_bucket": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"log_object_prefix": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"BucketWebsite": schema.ObjectType{
				Description: toPtr("holds the bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See https://cloud.google.com/storage/docs/static-website for more information."),
				Fields: schema.ObjectTypeFields{
					"main_page_suffix": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"not_found_page": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"CustomPlacementConfig": schema.ObjectType{
				Description: toPtr("holds the bucket's custom placement configuration for Custom Dual Regions. See https://cloud.google.com/storage/docs/locations#location-dr for more information."),
				Fields: schema.ObjectTypeFields{
					"data_locations": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"DownloadStorageObjectResponse": schema.ObjectType{
				Description: toPtr("represents the object data response in base64-encode string format."),
				Fields: schema.ObjectTypeFields{
					"data": schema.ObjectField{
						Type: schema.NewNamedType("Bytes").Encode(),
					},
				},
			},
			"DownloadStorageObjectTextResponse": schema.ObjectType{
				Description: toPtr("represents the object data response in string format."),
				Fields: schema.ObjectTypeFields{
					"data": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"ExistsResponse": schema.ObjectType{
				Description: toPtr("represents a common existing response structure."),
				Fields: schema.ObjectTypeFields{
					"exists": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
				},
			},
			"GetStorageBucketArguments": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"access_key_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"secret_access_key": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewPredicateType("StorageBucketFilter")).Encode(),
					},
				},
			},
			"GetStorageObjectOptions": schema.ObjectType{
				Description: toPtr("are used to specify additional headers or options during GET requests."),
				Fields: schema.ObjectTypeFields{
					"headers": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"part_number": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"request_params": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"version_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"HTTPRequestOptions": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"body_text": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"headers": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"method": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("DownloadHTTPMethod")).Encode(),
					},
					"url": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"ListIncompleteUploadsOptions": schema.ObjectType{
				Description: toPtr("the input arguments of the ListIncompleteUploads method."),
				Fields: schema.ObjectTypeFields{
					"prefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"ListStorageObjectsArguments": schema.ObjectType{
				Description: toPtr("holds all arguments of a list object request."),
				Fields: schema.ObjectTypeFields{
					"access_key_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"after": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"first": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"prefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"recursive": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"secret_access_key": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			"MakeStorageBucketOptions": schema.ObjectType{
				Description: toPtr("holds all options to tweak bucket creation."),
				Fields: schema.ObjectTypeFields{
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"object_lock": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"region": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
				},
			},
			"ObjectAbortIncompleteMultipartUpload": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"days_after_initiation": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"ObjectLifecycleAllVersionsExpiration": schema.ObjectType{
				Description: toPtr("represents AllVersionsExpiration actions element in an ILM policy"),
				Fields: schema.ObjectTypeFields{
					"days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"delete_marker": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
				},
			},
			"ObjectLifecycleConfiguration": schema.ObjectType{
				Description: toPtr("is a collection of lifecycle Rule objects."),
				Fields: schema.ObjectTypeFields{
					"rules": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("ObjectLifecycleRule")).Encode(),
					},
				},
			},
			"ObjectLifecycleDelMarkerExpiration": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"ObjectLifecycleExpiration": schema.ObjectType{
				Description: toPtr("expiration details of lifecycle configuration"),
				Fields: schema.ObjectTypeFields{
					"date": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Date")).Encode(),
					},
					"days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"expired_object_all_versions": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"expired_object_delete_marker": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
				},
			},
			"ObjectLifecycleFilter": schema.ObjectType{
				Description: toPtr("will be used in selecting rule(s) for lifecycle configuration"),
				Fields: schema.ObjectTypeFields{
					"matches_prefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("String"))).Encode(),
					},
					"matches_storage_classes": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("String"))).Encode(),
					},
					"matches_suffix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("String"))).Encode(),
					},
					"object_size_greater_than": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"object_size_less_than": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
				},
			},
			"ObjectLifecycleNoncurrentVersionExpiration": schema.ObjectType{
				Description: toPtr("- Specifies when noncurrent object versions expire. Upon expiration, server permanently deletes the noncurrent object versions. Set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request server delete noncurrent object versions at a specific period in the object's lifetime."),
				Fields: schema.ObjectTypeFields{
					"newer_noncurrent_versions": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"noncurrent_days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"ObjectLifecycleNoncurrentVersionTransition": schema.ObjectType{
				Description: toPtr("sets this action to request server to transition noncurrent object versions to different set storage classes at a specific period in the object's lifetime."),
				Fields: schema.ObjectTypeFields{
					"newer_noncurrent_versions": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"noncurrent_days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"storage_class": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"ObjectLifecycleRule": schema.ObjectType{
				Description: toPtr("represents a single rule in lifecycle configuration"),
				Fields: schema.ObjectTypeFields{
					"abort_incomplete_multipart_upload": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectAbortIncompleteMultipartUpload")).Encode(),
					},
					"all_versions_expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleAllVersionsExpiration")).Encode(),
					},
					"del_marker_expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleDelMarkerExpiration")).Encode(),
					},
					"enabled": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleExpiration")).Encode(),
					},
					"filter": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("ObjectLifecycleFilter"))).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"noncurrent_version_expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleNoncurrentVersionExpiration")).Encode(),
					},
					"noncurrent_version_transition": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleNoncurrentVersionTransition")).Encode(),
					},
					"prefix": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"transition": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleTransition")).Encode(),
					},
				},
			},
			"ObjectLifecycleTransition": schema.ObjectType{
				Description: toPtr("transition details of lifecycle configuration"),
				Fields: schema.ObjectTypeFields{
					"date": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Date")).Encode(),
					},
					"days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"storage_class": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"PresignedGetStorageObjectOptions": schema.ObjectType{
				Description: toPtr("represent the options for the PresignedGetObject method."),
				Fields: schema.ObjectTypeFields{
					"expiry": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("DurationString")).Encode(),
					},
					"request_params": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
				},
			},
			"PresignedURLResponse": schema.ObjectType{
				Description: toPtr("holds the presigned URL and expiry information."),
				Fields: schema.ObjectTypeFields{
					"expired_at": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
					"url": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"PutStorageObjectArguments": schema.ObjectType{
				Description: toPtr("represents input arguments of the PutObject method."),
				Fields: schema.ObjectTypeFields{
					"access_key_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"options": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("PutStorageObjectOptions")).Encode(),
					},
					"secret_access_key": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			"PutStorageObjectOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for PutObject call."),
				Fields: schema.ObjectTypeFields{
					"auto_checksum": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ChecksumType")).Encode(),
					},
					"cache_control": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ChecksumType")).Encode(),
					},
					"concurrent_stream_parts": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"content_disposition": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"content_encoding": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"content_language": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"content_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"disable_content_sha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"disable_multipart": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"expires": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"legal_hold": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"metadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"num_threads": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"part_size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"retention": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("PutStorageObjectRetentionOptions")).Encode(),
					},
					"send_content_md5": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"storage_class": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"website_redirect_location": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"PutStorageObjectRetentionOptions": schema.ObjectType{
				Description: toPtr("represent options of object retention configuration."),
				Fields: schema.ObjectTypeFields{
					"governance_bypass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"mode": schema.ObjectField{
						Type: schema.NewNamedType("StorageRetentionMode").Encode(),
					},
					"retain_until_date": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
				},
			},
			"RemoveStorageObjectError": schema.ObjectType{
				Description: toPtr("the container of Multi Delete S3 API error."),
				Fields: schema.ObjectTypeFields{
					"error": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"object_name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"version_id": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"RemoveStorageObjectOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for RemoveObject call."),
				Fields: schema.ObjectTypeFields{
					"force_delete": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"governance_bypass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"soft_delete": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"version_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"ServerSideEncryptionConfiguration": schema.ObjectType{
				Description: toPtr("is the default encryption configuration structure."),
				Fields: schema.ObjectTypeFields{
					"kms_master_key_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"sse_algorithm": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"SetStorageObjectLockConfig": schema.ObjectType{
				Description: toPtr("represents the object lock configuration options in given bucket"),
				Fields: schema.ObjectTypeFields{
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"unit": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionValidityUnit")).Encode(),
					},
					"validity": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"SetStorageObjectRetentionOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for PutObject call."),
				Fields: schema.ObjectTypeFields{
					"governance_bypass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"retain_until_date": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
				},
			},
			"StorageBucket": schema.ObjectType{
				Description: toPtr("the container for bucket metadata."),
				Fields: schema.ObjectTypeFields{
					"autoclass": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("BucketAutoclass")).Encode(),
					},
					"client_id": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"cors": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("BucketCors"))).Encode(),
					},
					"creation_time": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"custom_placement_config": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("CustomPlacementConfig")).Encode(),
					},
					"default_event_based_hold": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"encryption": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ServerSideEncryptionConfiguration")).Encode(),
					},
					"etag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"hierarchical_namespace": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("BucketHierarchicalNamespace")).Encode(),
					},
					"last_modified": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"lifecycle": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleConfiguration")).Encode(),
					},
					"location_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"logging": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("BucketLogging")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"object_lock": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageObjectLockConfig")).Encode(),
					},
					"region": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"requester_pays": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"rpo": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("GoogleStorageRPO")).Encode(),
					},
					"soft_delete_policy": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageObjectSoftDeletePolicy")).Encode(),
					},
					"storage_class": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"versioning": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageBucketVersioningConfiguration")).Encode(),
					},
					"website": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("BucketWebsite")).Encode(),
					},
				},
			},
			"StorageBucketArguments": schema.ObjectType{
				Description: toPtr("represent the common input arguments for bucket-related methods."),
				Fields: schema.ObjectTypeFields{
					"access_key_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"secret_access_key": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageBucketVersioningConfiguration": schema.ObjectType{
				Description: toPtr("is the versioning configuration structure"),
				Fields: schema.ObjectTypeFields{
					"enabled": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
					"exclude_folders": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"excluded_prefixes": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("String"))).Encode(),
					},
					"mfa_delete": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageClientCredentialArguments": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"access_key_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"secret_access_key": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageConnectionEdge_StorageBucket": schema.ObjectType{
				Description: toPtr("the connection information of the relay pagination response."),
				Fields: schema.ObjectTypeFields{
					"cursor": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"node": schema.ObjectField{
						Type: schema.NewNamedType("StorageBucket").Encode(),
					},
				},
			},
			"StorageConnectionEdge_StorageObject": schema.ObjectType{
				Description: toPtr("the connection information of the relay pagination response."),
				Fields: schema.ObjectTypeFields{
					"cursor": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"node": schema.ObjectField{
						Type: schema.NewNamedType("StorageObject").Encode(),
					},
				},
			},
			"StorageConnection_StorageBucket": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"edges": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("StorageConnectionEdge_StorageBucket")).Encode(),
					},
					"pageInfo": schema.ObjectField{
						Type: schema.NewNamedType("StoragePaginationInfo").Encode(),
					},
				},
			},
			"StorageConnection_StorageObject": schema.ObjectType{
				Fields: schema.ObjectTypeFields{
					"edges": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("StorageConnectionEdge_StorageObject")).Encode(),
					},
					"pageInfo": schema.ObjectField{
						Type: schema.NewNamedType("StoragePaginationInfo").Encode(),
					},
				},
			},
			"StorageCopyDestOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for CopyObject/ComposeObject APIs."),
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"legal_hold": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"metadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"retain_until_date": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
				},
			},
			"StorageCopySrcOptions": schema.ObjectType{
				Description: toPtr("represents a source object to be copied, using server-side copying APIs."),
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"end": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"match_etag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"match_modified_since": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"match_range": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"match_unmodified_since": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"no_match_etag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"start": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"version_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageGrant": schema.ObjectType{
				Description: toPtr("holds grant information."),
				Fields: schema.ObjectTypeFields{
					"grantee": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageGrantee")).Encode(),
					},
					"permission": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageGrantee": schema.ObjectType{
				Description: toPtr("represents the person being granted permissions."),
				Fields: schema.ObjectTypeFields{
					"display_name": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"uri": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageKeyValue": schema.ObjectType{
				Description: toPtr("represent a key-value string pair"),
				Fields: schema.ObjectTypeFields{
					"key": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"value": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
				},
			},
			"StorageObject": schema.ObjectType{
				Description: toPtr("container for object metadata."),
				Fields: schema.ObjectTypeFields{
					"access_tier_change_time": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"access_tier_inferred": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"acl": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("JSON")).Encode(),
					},
					"archive_status": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"blob_sequence_number": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"blob_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"cache_control": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_crc32": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_crc32c": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_crc64_nvme": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_sha1": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_sha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"content_disposition": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"content_encoding": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"content_language": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"content_md5": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"content_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"copy": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageObjectCopyInfo")).Encode(),
					},
					"creation_time": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"customer_provided_key_sha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"deleted": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"deleted_time": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"destination_snapshot": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"etag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"expiration_rule_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"expires": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"grant": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageGrant"))).Encode(),
					},
					"group": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"incremental_copy": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"is_directory": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
					"is_latest": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"kms_key_name": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"last_access_time": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"last_modified": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
					"lease_duration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"lease_state": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"lease_status": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"legal_hold": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"media_link": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"metadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"owner": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageOwner")).Encode(),
					},
					"permissions": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"raw_metadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"rehydrate_priority": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"remaining_retention_days": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"replication_ready": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"replication_status": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageObjectReplicationStatus")).Encode(),
					},
					"resource_type": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"restore": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRestoreInfo")).Encode(),
					},
					"retention_mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"retention_until_date": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"sealed": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"server_encrypted": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"storage_class": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tag_count": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"version_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageObjectChecksum": schema.ObjectType{
				Description: toPtr("represents checksum values of the object."),
				Fields: schema.ObjectTypeFields{
					"checksum_crc32": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_crc32c": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_crc64_nvme": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_sha1": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_sha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageObjectCopyInfo": schema.ObjectType{
				Description: toPtr("holds the copy information if the object was copied from another object."),
				Fields: schema.ObjectTypeFields{
					"completion_time": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"id": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"progress": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"source": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"status": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"status_description": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageObjectListResults": schema.ObjectType{
				Description: toPtr("hold the paginated results of the storage object list."),
				Fields: schema.ObjectTypeFields{
					"objects": schema.ObjectField{
						Type: schema.NewArrayType(schema.NewNamedType("StorageObject")).Encode(),
					},
					"pageInfo": schema.ObjectField{
						Type: schema.NewNamedType("StoragePaginationInfo").Encode(),
					},
				},
			},
			"StorageObjectLockConfig": schema.ObjectType{
				Description: toPtr("represents the object lock configuration in given bucket"),
				Fields: schema.ObjectTypeFields{
					"enabled": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
					"mode": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionMode")).Encode(),
					},
					"unit": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("StorageRetentionValidityUnit")).Encode(),
					},
					"validity": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
				},
			},
			"StorageObjectMultipartInfo": schema.ObjectType{
				Description: toPtr("container for multipart object metadata."),
				Fields: schema.ObjectTypeFields{
					"initiated": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"storage_class": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"upload_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StorageObjectSoftDeletePolicy": schema.ObjectType{
				Description: toPtr("contains the bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted."),
				Fields: schema.ObjectTypeFields{
					"effective_time": schema.ObjectField{
						Type: schema.NewNamedType("TimestampTZ").Encode(),
					},
					"retention_duration": schema.ObjectField{
						Type: schema.NewNamedType("DurationString").Encode(),
					},
				},
			},
			"StorageOwner": schema.ObjectType{
				Description: toPtr("name."),
				Fields: schema.ObjectTypeFields{
					"id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"StoragePaginationInfo": schema.ObjectType{
				Description: toPtr("holds the pagination information."),
				Fields: schema.ObjectTypeFields{
					"hasNextPage": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
				},
			},
			"StorageRestoreInfo": schema.ObjectType{
				Description: toPtr("contains information of the restore operation of an archived object."),
				Fields: schema.ObjectTypeFields{
					"expiry_time": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"ongoing_restore": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
				},
			},
			"StorageUploadInfo": schema.ObjectType{
				Description: toPtr("represents the information of the uploaded object."),
				Fields: schema.ObjectTypeFields{
					"bucket": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"checksum_crc32": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_crc32c": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_crc64_nvme": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_sha1": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"checksum_sha256": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"content_md5": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"etag": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"expiration": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"expiration_rule_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"last_modified": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("TimestampTZ")).Encode(),
					},
					"location": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": schema.ObjectField{
						Type: schema.NewNamedType("String").Encode(),
					},
					"size": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Int64")).Encode(),
					},
					"version_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			"SuccessResponse": schema.ObjectType{
				Description: toPtr("represents a common successful response structure."),
				Fields: schema.ObjectTypeFields{
					"success": schema.ObjectField{
						Type: schema.NewNamedType("Boolean").Encode(),
					},
				},
			},
			"UpdateStorageBucketOptions": schema.ObjectType{
				Description: toPtr("hold update options for the bucket."),
				Fields: schema.ObjectTypeFields{
					"encryption": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ServerSideEncryptionConfiguration")).Encode(),
					},
					"lifecycle": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleConfiguration")).Encode(),
					},
					"object_lock": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("SetStorageObjectLockConfig")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"versioning_enabled": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
				},
			},
			"UpdateStorageObjectOptions": schema.ObjectType{
				Description: toPtr("represents options specified by user for updating object."),
				Fields: schema.ObjectTypeFields{
					"legal_hold": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"metadata": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"retention": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("SetStorageObjectRetentionOptions")).Encode(),
					},
					"tags": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"version_id": schema.ObjectField{
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
		},
		Functions: []schema.FunctionInfo{
			{
				Name:        "download_storage_object_as_base64",
				Description: toPtr("returns a stream of the object data. Most of the common errors occur when reading the stream."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("DownloadStorageObjectResponse")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"headers": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"part_number": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"request_params": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"version_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "download_storage_object_as_text",
				Description: toPtr("returns the object content in plain text. Use this function only if you know exactly the file as an text file."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("DownloadStorageObjectTextResponse")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"headers": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"part_number": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"request_params": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"version_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "storage_bucket",
				Description: toPtr("gets a bucket by name."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("StorageBucket")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageBucketFilter")).Encode(),
					},
				},
			},
			{
				Name:        "storage_bucket_connections",
				Description: toPtr("list all buckets using the relay style."),
				ResultType:  schema.NewNamedType("StorageConnection_StorageBucket").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"after": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"first": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"prefix": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageBucketFilter")).Encode(),
					},
				},
			},
			{
				Name:        "storage_bucket_exists",
				Description: toPtr("checks if a bucket exists."),
				ResultType:  schema.NewNamedType("ExistsResponse").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageBucketFilter")).Encode(),
					},
				},
			},
			{
				Name:        "storage_deleted_objects",
				Description: toPtr("list deleted objects in a bucket."),
				ResultType:  schema.NewNamedType("StorageObjectListResults").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"after": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"first": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"prefix": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"recursive": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "storage_incomplete_uploads",
				Description: toPtr("list partially uploaded objects in a bucket."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("StorageObjectMultipartInfo")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"prefix": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			{
				Name:        "storage_object",
				Description: toPtr("fetches metadata of an object."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("StorageObject")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"headers": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"part_number": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"request_params": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"version_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "storage_object_connections",
				Description: toPtr("lists objects in a bucket using the relay style."),
				ResultType:  schema.NewNamedType("StorageConnection_StorageObject").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"after": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"first": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"prefix": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"recursive": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "storage_presigned_download_url",
				Description: toPtr("generates a presigned URL for HTTP GET operations. Browsers/Mobile clients may point to this URL to directly download objects even if the bucket is private. This presigned URL can have an associated expiration time in seconds after which it is no longer operational. The maximum expiry is 604800 seconds (i.e. 7 days) and minimum is 1 second."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("PresignedURLResponse")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"expiry": {
						Type: schema.NewNullableType(schema.NewNamedType("DurationString")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"request_params": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "storage_presigned_upload_url",
				Description: toPtr("generates a presigned URL for HTTP PUT operations. Browsers/Mobile clients may point to this URL to upload objects directly to a bucket even if it is private. This presigned URL can have an associated expiration time in seconds after which it is no longer operational. The default expiry is set to 7 days."),
				ResultType:  schema.NewNullableType(schema.NewNamedType("PresignedURLResponse")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"expiry": {
						Type: schema.NewNullableType(schema.NewNamedType("DurationString")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
		},
		Procedures: []schema.ProcedureInfo{
			{
				Name:        "compose_storage_object",
				Description: toPtr("creates an object by concatenating a list of source objects using server-side copying."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"dest": {
						Type: schema.NewNamedType("StorageCopyDestOptions").Encode(),
					},
					"sources": {
						Type: schema.NewArrayType(schema.NewNamedType("StorageCopySrcOptions")).Encode(),
					},
				},
			},
			{
				Name:        "copy_storage_object",
				Description: toPtr("creates or replaces an object through server-side copying of an existing object. It supports conditional copying, copying a part of an object and server-side encryption of destination and decryption of source. To copy multiple source objects into a single destination object see the ComposeObject API."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"dest": {
						Type: schema.NewNamedType("StorageCopyDestOptions").Encode(),
					},
					"source": {
						Type: schema.NewNamedType("StorageCopySrcOptions").Encode(),
					},
				},
			},
			{
				Name:        "create_storage_bucket",
				Description: toPtr("creates a new bucket."),
				ResultType:  schema.NewNamedType("SuccessResponse").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"object_lock": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"region": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
				},
			},
			{
				Name:        "remove_incomplete_storage_upload",
				Description: toPtr("removes a partially uploaded object."),
				ResultType:  schema.NewNamedType("SuccessResponse").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
				},
			},
			{
				Name:        "remove_storage_bucket",
				Description: toPtr("removes a bucket, bucket should be empty to be successfully removed."),
				ResultType:  schema.NewNamedType("SuccessResponse").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageBucketFilter")).Encode(),
					},
				},
			},
			{
				Name:        "remove_storage_object",
				Description: toPtr("removes an object with some specified options."),
				ResultType:  schema.NewNamedType("SuccessResponse").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"force_delete": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"governance_bypass": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"soft_delete": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"version_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "remove_storage_objects",
				Description: toPtr("remove a list of objects obtained from an input channel. The call sends a delete request to the server up to 1000 objects at a time. The errors observed are sent over the error channel."),
				ResultType:  schema.NewArrayType(schema.NewNamedType("RemoveStorageObjectError")).Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"after": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"first": {
						Type: schema.NewNullableType(schema.NewNamedType("Int32")).Encode(),
					},
					"governance_bypass": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"prefix": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"recursive": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "restore_storage_object",
				Description: toPtr("restore a soft-deleted object."),
				ResultType:  schema.NewNamedType("SuccessResponse").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "update_storage_bucket",
				Description: toPtr("updates the bucket's configuration."),
				ResultType:  schema.NewNamedType("SuccessResponse").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"encryption": {
						Type: schema.NewNullableType(schema.NewNamedType("ServerSideEncryptionConfiguration")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"lifecycle": {
						Type: schema.NewNullableType(schema.NewNamedType("ObjectLifecycleConfiguration")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"object_lock": {
						Type: schema.NewNullableType(schema.NewNamedType("SetStorageObjectLockConfig")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"versioning_enabled": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageBucketFilter")).Encode(),
					},
				},
			},
			{
				Name:        "update_storage_object",
				Description: toPtr("updates the object's configuration."),
				ResultType:  schema.NewNamedType("SuccessResponse").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"legal_hold": {
						Type: schema.NewNullableType(schema.NewNamedType("Boolean")).Encode(),
					},
					"metadata": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"retention": {
						Type: schema.NewNullableType(schema.NewNamedType("SetStorageObjectRetentionOptions")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"tags": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"version_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "upload_storage_object_as_base64",
				Description: toPtr("uploads object that are less than 128MiB in a single PUT operation. For objects that are greater than 128MiB in size, PutObject seamlessly uploads the object as parts of 128MiB or more depending on the actual file size. The max upload size for an object is 5TB."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"data": {
						Type: schema.NewNamedType("Bytes").Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"options": {
						Type: schema.NewNullableType(schema.NewNamedType("PutStorageObjectOptions")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "upload_storage_object_as_text",
				Description: toPtr("uploads object in plain text to the storage server. The file content is not encoded to base64 so the input size is smaller than 30%."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"data": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"options": {
						Type: schema.NewNullableType(schema.NewNamedType("PutStorageObjectOptions")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
			{
				Name:        "upload_storage_object_from_url",
				Description: toPtr("uploads an object from a remote file that is downloaded from an HTTP URL. The HTTP clients download the file and upload it to the storage bucket."),
				ResultType:  schema.NewNamedType("StorageUploadInfo").Encode(),
				Arguments: map[string]schema.ArgumentInfo{
					"access_key_id": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"body_text": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"bucket": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"client_id": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageClientID")).Encode(),
					},
					"client_type": {
						Type: schema.NewNullableType(schema.NewNamedType("StorageProviderType")).Encode(),
					},
					"endpoint": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"headers": {
						Type: schema.NewNullableType(schema.NewArrayType(schema.NewNamedType("StorageKeyValue"))).Encode(),
					},
					"method": {
						Type: schema.NewNullableType(schema.NewNamedType("DownloadHTTPMethod")).Encode(),
					},
					"name": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"options": {
						Type: schema.NewNullableType(schema.NewNamedType("PutStorageObjectOptions")).Encode(),
					},
					"secret_access_key": {
						Type: schema.NewNullableType(schema.NewNamedType("String")).Encode(),
					},
					"url": {
						Type: schema.NewNamedType("String").Encode(),
					},
					"where": {
						Type: schema.NewNullableType(schema.NewPredicateType("StorageObjectFilter")).Encode(),
					},
				},
			},
		},
		ScalarTypes: schema.SchemaResponseScalarTypes{
			"Boolean": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationBoolean().Encode(),
			},
			"Bytes": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationBytes().Encode(),
			},
			"ChecksumType": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"SHA256", "SHA1", "CRC32", "CRC32C", "CRC64NVME", "FullObjectCRC32", "FullObjectCRC32C", "None"}).Encode(),
			},
			"Date": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationDate().Encode(),
			},
			"DownloadHTTPMethod": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"GET", "POST"}).Encode(),
			},
			"DurationString": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationString().Encode(),
			},
			"GoogleStorageRPO": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"DEFAULT", "ASYNC_TURBO"}).Encode(),
			},
			"Int32": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationInt32().Encode(),
			},
			"Int64": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationInt64().Encode(),
			},
			"JSON": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationJSON().Encode(),
			},
			"StorageClientID": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationString().Encode(),
			},
			"StorageObjectReplicationStatus": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"COMPLETED", "PENDING", "FAILED", "REPLICA"}).Encode(),
			},
			"StorageProviderType": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"s3", "gcs", "azblob", "fs"}).Encode(),
			},
			"StorageRetentionMode": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"Locked", "Unlocked", "Mutable", "Delete"}).Encode(),
			},
			"StorageRetentionValidityUnit": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationEnum([]string{"DAYS", "YEARS"}).Encode(),
			},
			"String": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationString().Encode(),
			},
			"TimestampTZ": schema.ScalarType{
				AggregateFunctions:  schema.ScalarTypeAggregateFunctions{},
				ComparisonOperators: map[string]schema.ComparisonOperatorDefinition{},
				Representation:      schema.NewTypeRepresentationTimestampTZ().Encode(),
			},
		},
	}
}
