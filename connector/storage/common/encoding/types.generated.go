// Code generated by github.com/hasura/ndc-sdk-go/cmd/hasura-ndc-go, DO NOT EDIT.
package encoding

import (
	"github.com/hasura/ndc-sdk-go/utils"
)

// FromValue decodes values from map
func (j *CSVDecodeOptions) FromValue(input map[string]any) error {
	var err error
	j.Comma, err = utils.GetStringDefault(input, "comma")
	if err != nil {
		return err
	}
	j.Comment, err = utils.GetStringDefault(input, "comment")
	if err != nil {
		return err
	}
	j.LazyQuotes, err = utils.GetNullableBoolean(input, "lazy_quotes")
	if err != nil {
		return err
	}
	j.NoHeader, err = utils.GetBooleanDefault(input, "no_header")
	if err != nil {
		return err
	}
	j.ParseJSON, err = utils.GetBooleanDefault(input, "parse_json")
	if err != nil {
		return err
	}
	j.Transpose, err = utils.GetBooleanDefault(input, "transpose")
	if err != nil {
		return err
	}
	j.TrimLeadingSpace, err = utils.GetNullableBoolean(input, "trim_leading_space")
	if err != nil {
		return err
	}
	return nil
}

// ToMap encodes the struct to a value map
func (j CSVDecodeOptions) ToMap() map[string]any {
	r := make(map[string]any)
	r["comma"] = j.Comma
	r["comment"] = j.Comment
	r["lazy_quotes"] = j.LazyQuotes
	r["no_header"] = j.NoHeader
	r["parse_json"] = j.ParseJSON
	r["transpose"] = j.Transpose
	r["trim_leading_space"] = j.TrimLeadingSpace

	return r
}
